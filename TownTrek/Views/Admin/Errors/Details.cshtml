@using TownTrek.Models
@model ErrorLogEntry
@{
    ViewData["Title"] = $"Error Details - {Model.ErrorType}";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="page-header">
    <div class="page-header-content">
        <div>
            <h1 class="page-title">Error Details</h1>
            <p class="page-description">
                <span class="badge badge-@Model.ErrorType.ToLower()">@Model.ErrorType</span>
                <span class="badge badge-@Model.Severity.ToLower()">@Model.Severity</span>
                @if (Model.IsResolved)
                {
                    <span class="badge badge-success">Resolved</span>
                }
                else
                {
                    <span class="badge badge-danger">Unresolved</span>
                }
            </p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("Index", "Errors")" class="auth-btn auth-btn-secondary">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to List
            </a>
        </div>
    </div>
</div>

<!-- Error Information -->
<div class="admin-card">
    <div class="admin-card-header">
        <h3 class="admin-card-title">Error Information</h3>
    </div>
    
    <div class="error-details">
        <div class="detail-row">
            <label>Error ID:</label>
            <span>@Model.Id</span>
        </div>
        
        <div class="detail-row">
            <label>Timestamp:</label>
            <span>@Model.Timestamp.ToString("yyyy-MM-dd HH:mm:ss UTC")</span>
        </div>
        
        <div class="detail-row">
            <label>Error Type:</label>
            <span class="badge badge-@Model.ErrorType.ToLower()">@Model.ErrorType</span>
        </div>
        
        <div class="detail-row">
            <label>Severity:</label>
            <span class="badge badge-@Model.Severity.ToLower()">@Model.Severity</span>
        </div>
        
        @if (!string.IsNullOrEmpty(Model.RequestPath))
        {
            <div class="detail-row">
                <label>Request Path:</label>
                <code>@Model.RequestPath</code>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(Model.IpAddress))
        {
            <div class="detail-row">
                <label>IP Address:</label>
                <span>@Model.IpAddress</span>
            </div>
        }
        
        @if (Model.User != null)
        {
            <div class="detail-row">
                <label>Affected User:</label>
                <span>@Model.User.FirstName @Model.User.LastName (@Model.User.Email)</span>
            </div>
        }
    </div>
</div>

<!-- Error Message -->
<div class="admin-card">
    <div class="admin-card-header">
        <h3 class="admin-card-title">Error Message</h3>
        <div class="admin-card-actions">
            <button onclick="copyToClipboard('error-message')" class="header-btn" title="Copy Message">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                </svg>
            </button>
        </div>
    </div>
    
    <div class="code-block">
        <pre id="error-message">@Model.Message</pre>
    </div>
</div>

<!-- Stack Trace -->
@if (!string.IsNullOrEmpty(Model.StackTrace))
{
    <div class="admin-card">
        <div class="admin-card-header">
            <h3 class="admin-card-title">Stack Trace</h3>
            <div class="admin-card-actions">
                <button onclick="copyToClipboard('stack-trace')" class="header-btn" title="Copy Stack Trace">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <div class="code-block">
            <pre id="stack-trace">@Model.StackTrace</pre>
        </div>
    </div>
}

<!-- Request Context -->
@if (!string.IsNullOrEmpty(Model.UserAgent))
{
    <div class="admin-card">
        <div class="admin-card-header">
            <h3 class="admin-card-title">Request Context</h3>
        </div>
        
        <div class="error-details">
            <div class="detail-row">
                <label>User Agent:</label>
                <span class="text-small">@Model.UserAgent</span>
            </div>
        </div>
    </div>
}

<!-- Resolution Status -->
<div class="admin-card">
    <div class="admin-card-header">
        <h3 class="admin-card-title">Resolution Status</h3>
    </div>
    
    @if (Model.IsResolved)
    {
        <div class="resolution-info">
            <div class="resolution-status resolved">
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>This error has been resolved</span>
            </div>
            
            <div class="resolution-details">
                <div class="detail-row">
                    <label>Resolved By:</label>
                    <span>@(Model.ResolvedByUser?.FirstName ?? "Unknown") @(Model.ResolvedByUser?.LastName ?? "")</span>
                </div>
                
                <div class="detail-row">
                    <label>Resolved At:</label>
                    <span>@Model.ResolvedAt?.ToString("yyyy-MM-dd HH:mm:ss UTC")</span>
                </div>
                
                @if (!string.IsNullOrEmpty(Model.Notes))
                {
                    <div class="detail-row">
                        <label>Resolution Notes:</label>
                        <div class="resolution-notes">@Model.Notes</div>
                    </div>
                }
            </div>
            
            <form method="post" action="@Url.Action("Unresolve", "Errors", new { id = Model.Id })" class="resolution-form">
                @Html.AntiForgeryToken()
                <button type="submit" class="auth-btn auth-btn-warning" onclick="return confirm('Are you sure you want to mark this error as unresolved?')">
                    Mark as Unresolved
                </button>
            </form>
            <button type="button" class="auth-btn auth-btn-secondary" onclick="ConfirmationModal.show({
                title: 'Delete Error Log',
                message: 'Are you sure you want to delete this error log?',
                details: 'This action cannot be undone.',
                confirmText: 'Delete',
                iconType: 'danger',
                confirmButtonType: 'danger',
                formAction: '@Url.Action("Delete", "Errors", new { id = Model.Id })',
                formMethod: 'post'
            })">
                Delete Log
            </button>
        </div>
    }
    else
    {
        <div class="resolution-info">
            <div class="resolution-status unresolved">
                <svg width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>This error is unresolved</span>
            </div>
            
            <form method="post" action="@Url.Action("Resolve", "Errors", new { id = Model.Id })" class="resolution-form">
                @Html.AntiForgeryToken()
                
                <div class="form-group">
                    <label for="notes" class="form-label">Resolution Notes (Optional):</label>
                    <textarea name="notes" id="notes" rows="3" class="form-textarea" 
                              placeholder="Add any notes about how this error was resolved..."></textarea>
                </div>
                
                <button type="submit" class="auth-btn auth-btn-success">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Mark as Resolved
                </button>
            </form>
            <button type="button" class="auth-btn auth-btn-secondary" onclick="ConfirmationModal.show({
                title: 'Delete Error Log',
                message: 'Are you sure you want to delete this error log?',
                details: 'This action cannot be undone.',
                confirmText: 'Delete',
                iconType: 'danger',
                confirmButtonType: 'danger',
                formAction: '@Url.Action("Delete", "Errors", new { id = Model.Id })',
                formMethod: 'post'
            })">
                Delete Log
            </button>
        </div>
    }
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

<script>
function copyToClipboard(elementId) {
    const element = document.getElementById(elementId);
    const text = element.textContent;
    
    navigator.clipboard.writeText(text).then(function() {
        // Show success feedback
        const button = event.target.closest('button');
        const originalTitle = button.title;
        button.title = 'Copied!';
        setTimeout(() => {
            button.title = originalTitle;
        }, 2000);
    });
}
</script>
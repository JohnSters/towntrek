@using TownTrek.Models
@using TownTrek.Models.ViewModels
@model PagedResult<ErrorLogEntry>
@{
    ViewData["Title"] = "System Error Logs";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    var filter = ViewBag.Filter as ErrorLogFilter;
}

<div class="page-header">
    <div class="page-header-content">
        <div>
            <h1 class="page-title">System Error Logs</h1>
            <p class="page-description">Monitor and manage system errors and exceptions.</p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("Stats", "Errors")" class="auth-btn auth-btn-secondary">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                View Statistics
            </a>
        </div>
    </div>
</div>

<!-- Filters -->
<div class="admin-card">
    <div class="admin-card-header">
        <h3 class="admin-card-title">Filter Errors</h3>
    </div>
    
    <form method="get" class="filter-form">
        <div class="filter-grid">
            <div class="filter-group">
                <label for="ErrorType" class="form-label">Error Type</label>
                <select name="ErrorType" id="ErrorType" class="form-select">
                    <option value="">All Types</option>
                    @foreach (var type in ViewBag.ErrorTypes as string[])
                    {
                        <option value="@type" selected="@(filter?.ErrorType == type)">@type</option>
                    }
                </select>
            </div>
            
            <div class="filter-group">
                <label for="Severity" class="form-label">Severity</label>
                <select name="Severity" id="Severity" class="form-select">
                    <option value="">All Severities</option>
                    @foreach (var severity in ViewBag.Severities as string[])
                    {
                        <option value="@severity" selected="@(filter?.Severity == severity)">@severity</option>
                    }
                </select>
            </div>
            
            <div class="filter-group">
                <label for="IsResolved" class="form-label">Status</label>
                <select name="IsResolved" id="IsResolved" class="form-select">
                    <option value="">All</option>
                    <option value="false" selected="@(filter?.IsResolved == false)">Unresolved</option>
                    <option value="true" selected="@(filter?.IsResolved == true)">Resolved</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="SearchTerm" class="form-label">Search</label>
                <input type="text" name="SearchTerm" id="SearchTerm" value="@filter?.SearchTerm" 
                       placeholder="Search messages or users..." class="form-input">
            </div>
        </div>
        
        <div class="filter-actions">
            <button type="submit" class="auth-btn auth-btn-primary">Apply Filters</button>
            <a href="@Url.Action("Index", "Errors")" class="auth-btn auth-btn-secondary">Clear</a>
        </div>
    </form>
</div>

<!-- Error List -->
<div class="admin-card">
    <div class="admin-card-header">
        <h3 class="admin-card-title">
            Error Logs 
            <span class="badge">@Model.TotalCount total</span>
        </h3>
    </div>
    
    @if (Model.Items.Any())
    {
        <div class="table-responsive">
            <table class="admin-table">
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Type</th>
                        <th>Severity</th>
                        <th>Message</th>
                        <th>User</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var error in Model.Items)
                    {
                        <tr class="@(error.Severity == "Critical" ? "row-danger" : error.Severity == "Error" ? "row-warning" : "")">
                            <td>
                                <div class="timestamp">
                                    @error.Timestamp.ToString("yyyy-MM-dd HH:mm")
                                </div>
                            </td>
                            <td>
                                <span class="badge badge-@(error.ErrorType.ToLower())">@error.ErrorType</span>
                            </td>
                            <td>
                                <span class="badge badge-@(error.Severity.ToLower())">@error.Severity</span>
                            </td>
                            <td>
                                <div class="error-message">
                                    @(error.Message.Length > 100 ? error.Message.Substring(0, 100) + "..." : error.Message)
                                </div>
                            </td>
                            <td>
                                @if (error.User != null)
                                {
                                    <div class="user-info">
                                        @error.User.FirstName @error.User.LastName
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted">Anonymous</span>
                                }
                            </td>
                            <td>
                                @if (error.IsResolved)
                                {
                                    <span class="badge badge-success">Resolved</span>
                                }
                                else
                                {
                                    <span class="badge badge-danger">Unresolved</span>
                                }
                            </td>
                            <td>
                                <div class="table-actions">
                                    <a href="@Url.Action("Details", "Errors", new { id = error.Id })" class="table-action-btn" title="View Details">
                                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                        </svg>
                                    </a>
                                    <button type="button" class="table-action-btn danger" title="Delete"
                                            onclick="ConfirmationModal.show({
                                                title: 'Delete Error Log',
                                                message: 'Are you sure you want to delete this error log?',
                                                details: 'This action cannot be undone.',
                                                confirmText: 'Delete',
                                                iconType: 'danger',
                                                confirmButtonType: 'danger',
                                                formAction: '@Url.Action("Delete", "Errors", new { id = error.Id })',
                                                formMethod: 'post'
                                            })">
                                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="pagination-wrapper">
                <nav class="pagination">
                    @if (Model.HasPreviousPage)
                    {
                        <a href="@Url.Action("Index", "Errors", new { page = Model.Page - 1, filter.ErrorType, filter.Severity, filter.IsResolved, filter.SearchTerm })" 
                           class="pagination-link">Previous</a>
                    }
                    
                    @for (int i = Math.Max(1, Model.Page - 2); i <= Math.Min(Model.TotalPages, Model.Page + 2); i++)
                    {
                        <a href="@Url.Action("Index", "Errors", new { page = i, filter.ErrorType, filter.Severity, filter.IsResolved, filter.SearchTerm })" 
                           class="pagination-link @(i == Model.Page ? "active" : "")">@i</a>
                    }
                    
                    @if (Model.HasNextPage)
                    {
                        <a href="@Url.Action("Index", "Errors", new { page = Model.Page + 1, filter.ErrorType, filter.Severity, filter.IsResolved, filter.SearchTerm })" 
                           class="pagination-link">Next</a>
                    }
                </nav>
            </div>
        }
    }
    else
    {
        <div class="empty-state">
            <div class="empty-state-icon">
                <svg width="48" height="48" fill="none" stroke="currentColor" viewBox="0 0 23 23">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
            </div>
            <h3>No Errors Found</h3>
            <p>No errors match your current filter criteria.</p>
        </div>
    }
</div>
@model TownTrek.Models.AddBusinessViewModel
@{
    ViewData["Title"] = "Edit Business";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/add-business.css" asp-append-version="true" />
}

@section Scripts {
    <script src="~/js/add-business.js" asp-append-version="true"></script>
}

<!-- Page Header -->
<div class="page-header">
    <div class="page-header-content">
        <div>
            <h1 class="page-title">Edit Business</h1>
            <p class="page-description">Update business information and details.</p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("Businesses", "Admin")" class="auth-btn auth-btn-secondary">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to Businesses
            </a>
        </div>
    </div>
</div>

<!-- Edit Business Form -->
<div class="admin-card">
    <div class="admin-card-header">
        <h3 class="admin-card-title">Business Information</h3>
        <p class="admin-card-description">Update the business details below</p>
    </div>
    
    <form class="add-business-form" method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()
        <input type="hidden" name="Id" value="@Model.Id" />
        
        <!-- Step 1: Basic Information -->
        <div class="form-section">
            <div class="form-section-header">
                <h4 class="form-section-title">
                    <span class="step-number">1</span>
                    Basic Information
                </h4>
                <p class="form-section-description">Essential details about the business</p>
            </div>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="businessName" class="form-label required">Business Name</label>
                    <input type="text" id="businessName" name="BusinessName" class="form-input" 
                           value="@Model.BusinessName" placeholder="Enter business name" required>
                    <span class="form-help">This will be displayed as the main business title</span>
                </div>

                <div class="form-group">
                    <label for="businessCategory" class="form-label required">Business Category</label> 
                    <select id="businessCategory" name="BusinessCategory" class="form-select" required>
                        <option value="">Select a category</option>
                        <option value="shops-retail" selected="@(Model.BusinessCategory == "shops-retail")">Shops & Retail</option>
                        <option value="restaurants-food" selected="@(Model.BusinessCategory == "restaurants-food")">Restaurants & Food Services</option>
                        <option value="markets-vendors" selected="@(Model.BusinessCategory == "markets-vendors")">Markets & Vendors</option>
                        <option value="accommodation" selected="@(Model.BusinessCategory == "accommodation")">Accommodation</option>
                        <option value="tours-experiences" selected="@(Model.BusinessCategory == "tours-experiences")">Tours & Experiences</option>
                        <option value="events" selected="@(Model.BusinessCategory == "events")">Events</option>
                    </select>
                    <span class="form-help">Choose the category that best describes the business</span>
                </div>

                <div id="subCategoryContainer" class="form-group" style="display: @(string.IsNullOrEmpty(Model.SubCategory) ? "none" : "block");">
                    <label for="subCategory" class="form-label">Sub Category</label>
                    <select id="subCategory" name="SubCategory" class="form-select">
                        <option value="">Select a subcategory (optional)</option>
                        <!-- Subcategories will be populated via JavaScript -->
                    </select>
                    <span class="form-help">Choose a more specific category if available</span>
                </div>

                <div class="form-group">
                    <label for="townId" class="form-label required">Town/Location</label>
                    <select id="townId" name="TownId" class="form-select" required>
                        <option value="">Select the town</option>
                        @foreach (var town in Model.AvailableTowns)
                        {
                            <option value="@town.Id" selected="@(Model.TownId == town.Id)">@town.Name, @town.Province</option>
                        }
                    </select>
                    <span class="form-help">Select the town where the business is located</span>
                </div>

                <div class="form-group form-group-full">
                    <label for="businessDescription" class="form-label required">Business Description</label>
                    <textarea id="businessDescription" name="BusinessDescription" class="form-textarea" rows="4" 
                              placeholder="Describe the business, services, and what makes it unique..." required>@Model.BusinessDescription</textarea>
                    <span class="form-help">Provide a detailed description to help customers understand the business</span>
                </div>

                <div class="form-group form-group-full">
                    <label for="shortDescription" class="form-label">Short Description</label>
                    <textarea id="shortDescription" name="ShortDescription" class="form-textarea" rows="2" 
                              placeholder="Brief summary for listings and previews...">@Model.ShortDescription</textarea>
                    <span class="form-help">A concise description for quick previews (optional)</span>
                </div>
            </div>
        </div>

        <!-- Step 2: Contact Information -->
        <div class="form-section">
            <div class="form-section-header">
                <h4 class="form-section-title">
                    <span class="step-number">2</span>
                    Contact Information
                </h4>
                <p class="form-section-description">How customers can reach the business</p>
            </div>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="phoneNumber" class="form-label required">Primary Phone Number</label>
                    <input type="tel" id="phoneNumber" name="PhoneNumber" class="form-input" 
                           value="@Model.PhoneNumber" placeholder="Enter primary phone number" required>
                    <span class="form-help">Main contact number for the business</span>
                </div>

                <div class="form-group">
                    <label for="phoneNumber2" class="form-label">Secondary Phone Number</label>
                    <input type="tel" id="phoneNumber2" name="PhoneNumber2" class="form-input" 
                           value="@Model.PhoneNumber2" placeholder="Enter secondary phone number (optional)">
                    <span class="form-help">Additional contact number if available</span>
                </div>

                <div class="form-group">
                    <label for="emailAddress" class="form-label">Email Address</label>
                    <input type="email" id="emailAddress" name="EmailAddress" class="form-input" 
                           value="@Model.EmailAddress" placeholder="Enter email address (optional)">
                    <span class="form-help">Business email for inquiries</span>
                </div>

                <div class="form-group">
                    <label for="website" class="form-label">Website</label>
                    <input type="url" id="website" name="Website" class="form-input" 
                           value="@Model.Website" placeholder="https://www.example.com (optional)">
                    <span class="form-help">Business website URL if available</span>
                </div>

                <div class="form-group form-group-full">
                    <label for="physicalAddress" class="form-label required">Physical Address</label>
                    <textarea id="physicalAddress" name="PhysicalAddress" class="form-textarea" rows="2" 
                              placeholder="Enter the complete physical address..." required>@Model.PhysicalAddress</textarea>
                    <span class="form-help">Full street address of the business location</span>
                </div>
            </div>
        </div>

        <!-- Step 3: Location & Coordinates -->
        <div class="form-section">
            <div class="form-section-header">
                <h4 class="form-section-title">
                    <span class="step-number">3</span>
                    Location & Coordinates
                </h4>
                <p class="form-section-description">Map location and GPS coordinates</p>
            </div>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="latitude" class="form-label">Latitude</label>
                    <input type="number" id="latitude" name="Latitude" class="form-input" 
                           value="@Model.Latitude" step="0.000001" placeholder="e.g., -26.2041">
                    <span class="form-help">GPS latitude coordinate (optional)</span>
                </div>

                <div class="form-group">
                    <label for="longitude" class="form-label">Longitude</label>
                    <input type="number" id="longitude" name="Longitude" class="form-input" 
                           value="@Model.Longitude" step="0.000001" placeholder="e.g., 28.0473">
                    <span class="form-help">GPS longitude coordinate (optional)</span>
                </div>

                <div class="form-group form-group-full">
                    <div class="map-container">
                        <div id="map" class="map-preview"></div>
                        <button type="button" id="getLocationBtn" class="auth-btn auth-btn-secondary">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            </svg>
                            Get Current Location
                        </button>
                    </div>
                    <span class="form-help">Click to automatically get coordinates from the address</span>
                </div>
            </div>
        </div>

        <!-- Step 4: Operating Hours -->
        <div class="form-section">
            <div class="form-section-header">
                <h4 class="form-section-title">
                    <span class="step-number">4</span>
                    Operating Hours
                </h4>
                <p class="form-section-description">When the business is open</p>
            </div>
            
            <div class="business-hours-container">
                @for (int i = 0; i < 7; i++)
                {
                    var day = Model.BusinessHours.FirstOrDefault(h => h.DayOfWeek == i) ?? new BusinessHourViewModel { DayOfWeek = i };
                    var dayNames = new[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
                    
                    <div class="business-hour-row">
                        <div class="day-selector">
                            <input type="checkbox" id="isOpen_@i" name="BusinessHours[@i].IsOpen" 
                                   @(day.IsOpen ? "checked" : "") class="day-checkbox">
                            <label for="isOpen_@i" class="day-label">@dayNames[i]</label>
                        </div>
                        
                        <div class="time-inputs">
                            <input type="time" name="BusinessHours[@i].OpenTime" value="@day.OpenTime" 
                                   class="time-input" @(day.IsOpen ? "" : "disabled")>
                            <span class="time-separator">to</span>
                            <input type="time" name="BusinessHours[@i].CloseTime" value="@day.CloseTime" 
                                   class="time-input" @(day.IsOpen ? "" : "disabled")>
                        </div>
                        
                        <div class="special-hours">
                            <input type="checkbox" id="isSpecialHours_@i" name="BusinessHours[@i].IsSpecialHours" 
                                   @(day.IsSpecialHours ? "checked" : "") class="special-hours-checkbox">
                            <label for="isSpecialHours_@i" class="special-hours-label">Special Hours</label>
                            <input type="text" name="BusinessHours[@i].SpecialHoursNote" value="@day.SpecialHoursNote" 
                                   class="special-hours-note" placeholder="e.g., Closed for holidays" 
                                   @(day.IsSpecialHours ? "" : "disabled")>
                        </div>
                    </div>
                    
                    <input type="hidden" name="BusinessHours[@i].DayOfWeek" value="@i">
                    <input type="hidden" name="BusinessHours[@i].DayName" value="@dayNames[i]">
                }
            </div>
        </div>

        <!-- Step 5: Additional Information -->
        <div class="form-section">
            <div class="form-section-header">
                <h4 class="form-section-title">
                    <span class="step-number">5</span>
                    Additional Information
                </h4>
                <p class="form-section-description">Extra details and special offers</p>
            </div>
            
            <div class="form-grid">
                <div class="form-group">
                    <label for="specialOffers" class="form-label">Special Offers</label>
                    <textarea id="specialOffers" name="SpecialOffers" class="form-textarea" rows="2" 
                              placeholder="Any current promotions or special offers..."></textarea>
                    <span class="form-help">Current promotions or special deals (optional)</span>
                </div>

                <div class="form-group">
                    <label for="additionalNotes" class="form-label">Additional Notes</label>
                    <textarea id="additionalNotes" name="AdditionalNotes" class="form-textarea" rows="2" 
                              placeholder="Any additional information customers should know..."></textarea>
                    <span class="form-help">Important information for customers (optional)</span>
                </div>
            </div>
        </div>

        <!-- Form Actions -->
        <div class="form-actions">
            <button type="submit" class="auth-btn auth-btn-primary">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Update Business
            </button>
            
            <a href="@Url.Action("Businesses", "Admin")" class="auth-btn auth-btn-secondary">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Cancel
            </a>
        </div>
    </form>
</div>

<script>
// Initialize form with current values
document.addEventListener('DOMContentLoaded', function() {
    // Set current category to trigger subcategory population
    const categorySelect = document.getElementById('businessCategory');
    if (categorySelect.value) {
        populateSubCategories(categorySelect.value);
        
        // Set the current subcategory
        setTimeout(() => {
            const subCategorySelect = document.getElementById('subCategory');
            if (subCategorySelect) {
                subCategorySelect.value = '@Model.SubCategory';
            }
        }, 100);
    }
    
    // Initialize business hours functionality
    initializeBusinessHours();
    
    // Initialize map functionality
    initializeMap();
});

function populateSubCategories(category) {
    const subCategoryContainer = document.getElementById('subCategoryContainer');
    const subCategorySelect = document.getElementById('subCategory');
    
    if (!subCategorySelect) return;
    
    // Clear existing options
    subCategorySelect.innerHTML = '<option value="">Select a subcategory (optional)</option>';
    
    const subCategories = {
        'shops-retail': [
            { value: 'clothing-fashion', text: 'Clothing & Fashion' },
            { value: 'electronics', text: 'Electronics' },
            { value: 'home-garden', text: 'Home & Garden' },
            { value: 'books-stationery', text: 'Books & Stationery' },
            { value: 'sports-outdoor', text: 'Sports & Outdoor' },
            { value: 'jewelry-accessories', text: 'Jewelry & Accessories' },
            { value: 'pharmacy-health', text: 'Pharmacy & Health' },
            { value: 'other-retail', text: 'Other Retail' }
        ],
        'restaurants-food': [
            { value: 'fine-dining', text: 'Fine Dining' },
            { value: 'casual-dining', text: 'Casual Dining' },
            { value: 'fast-food', text: 'Fast Food' },
            { value: 'cafe-coffee', text: 'Café & Coffee' },
            { value: 'bakery-pastry', text: 'Bakery & Pastry' },
            { value: 'pizza-italian', text: 'Pizza & Italian' },
            { value: 'asian-cuisine', text: 'Asian Cuisine' },
            { value: 'african-cuisine', text: 'African Cuisine' },
            { value: 'other-food', text: 'Other Food Services' }
        ],
        'markets-vendors': [
            { value: 'farmers-market', text: 'Farmers Market' },
            { value: 'craft-market', text: 'Craft Market' },
            { value: 'flea-market', text: 'Flea Market' },
            { value: 'food-market', text: 'Food Market' },
            { value: 'artisan-market', text: 'Artisan Market' },
            { value: 'other-market', text: 'Other Market' }
        ],
        'accommodation': [
            { value: 'hotel', text: 'Hotel' },
            { value: 'guesthouse', text: 'Guesthouse' },
            { value: 'bed-breakfast', text: 'Bed & Breakfast' },
            { value: 'self-catering', text: 'Self-Catering' },
            { value: 'camping', text: 'Camping' },
            { value: 'other-accommodation', text: 'Other Accommodation' }
        ],
        'tours-experiences': [
            { value: 'cultural-tours', text: 'Cultural Tours' },
            { value: 'adventure-tours', text: 'Adventure Tours' },
            { value: 'food-tours', text: 'Food Tours' },
            { value: 'nature-tours', text: 'Nature Tours' },
            { value: 'city-tours', text: 'City Tours' },
            { value: 'other-tours', text: 'Other Tours' }
        ],
        'events': [
            { value: 'festivals', text: 'Festivals' },
            { value: 'concerts', text: 'Concerts' },
            { value: 'exhibitions', text: 'Exhibitions' },
            { value: 'workshops', text: 'Workshops' },
            { value: 'sports-events', text: 'Sports Events' },
            { value: 'other-events', text: 'Other Events' }
        ]
    };
    
    if (subCategories[category]) {
        subCategories[category].forEach(subCat => {
            const option = document.createElement('option');
            option.value = subCat.value;
            option.textContent = subCat.text;
            subCategorySelect.appendChild(option);
        });
        subCategoryContainer.style.display = 'block';
    } else {
        subCategoryContainer.style.display = 'none';
    }
}

function initializeBusinessHours() {
    // Handle day checkbox changes
    document.querySelectorAll('.day-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const row = this.closest('.business-hour-row');
            const timeInputs = row.querySelectorAll('.time-input');
            const specialHoursCheckbox = row.querySelector('.special-hours-checkbox');
            const specialHoursNote = row.querySelector('.special-hours-note');
            
            timeInputs.forEach(input => {
                input.disabled = !this.checked;
            });
            
            if (specialHoursCheckbox) {
                specialHoursCheckbox.disabled = !this.checked;
                if (!this.checked) {
                    specialHoursCheckbox.checked = false;
                    if (specialHoursNote) {
                        specialHoursNote.disabled = true;
                    }
                }
            }
        });
    });
    
    // Handle special hours checkbox changes
    document.querySelectorAll('.special-hours-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            const note = this.closest('.special-hours').querySelector('.special-hours-note');
            if (note) {
                note.disabled = !this.checked;
            }
        });
    });
}

function initializeMap() {
    // Map initialization code would go here
    // For now, just handle the get location button
    const getLocationBtn = document.getElementById('getLocationBtn');
    if (getLocationBtn) {
        getLocationBtn.addEventListener('click', function() {
            // Implement geocoding functionality
            console.log('Get location functionality to be implemented');
        });
    }
}
</script> 
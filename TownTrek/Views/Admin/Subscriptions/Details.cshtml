@model TownTrek.Models.ViewModels.SubscriptionTierViewModel
@{
    ViewData["Title"] = $"{Model.DisplayName} - Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<!-- Page Header -->
<div class="page-header">
    <div class="page-header-content">
        <div>
            <h1 class="page-title">@Model.DisplayName</h1>
            <p class="page-description">Detailed view of the @Model.DisplayName subscription tier.</p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("Index")" class="auth-btn auth-btn-secondary">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to Tiers
            </a>
            <a href="@Url.Action("Edit", new { id = Model.Id })" class="auth-btn auth-btn-cta">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                Edit Tier
            </a>
        </div>
    </div>
</div>

<!-- Status Alert -->
@if (!Model.IsActive)
{
    <div class="alert alert-error">
        <strong>Inactive Tier:</strong> This subscription tier is currently inactive and not available for new subscriptions.
    </div>
}
else if (Model.ActiveSubscriptionsCount > 0)
{
    <div class="alert alert-info">
        <strong>Active Tier:</strong> This tier has @Model.ActiveSubscriptionsCount active subscription(s).
    </div>
}

<div class="grid" style="grid-template-columns: 2fr 1fr; gap: var(--space-lg);">
    <!-- Main Details -->
    <div class="admin-card">
        <div class="admin-card-header">
            <h3 class="admin-card-title">Tier Information</h3>
        </div>
        
        <div class="form-section">
            <div class="form-grid">
                <div class="form-group">
                    <label class="form-label">Internal Name</label>
                    <div class="form-input" style="background-color: var(--light-gray); color: var(--dark-gray);">
                        @Model.Name
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Display Name</label>
                    <div class="form-input" style="background-color: var(--light-gray); color: var(--dark-gray);">
                        @Model.DisplayName
                    </div>
                </div>
                
                <div class="form-group form-group-full">
                    <label class="form-label">Description</label>
                    <div class="form-textarea" style="background-color: var(--light-gray); color: var(--dark-gray); min-height: 80px; padding: 0.75rem;">
                        @if (!string.IsNullOrEmpty(Model.Description))
                        {
                            @Model.Description
                        }
                        else
                        {
                            <em>No description provided</em>
                        }
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Monthly Price</label>
                    <div class="form-input" style="background-color: var(--light-gray); color: var(--lapis-lazuli); font-weight: 600; font-size: var(--body-large);">
                        R@(Model.MonthlyPrice.ToString("N0")) /month
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Sort Order</label>
                    <div class="form-input" style="background-color: var(--light-gray); color: var(--dark-gray);">
                        @Model.SortOrder
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Usage Limits -->
        <div class="form-section">
            <div class="form-section-header">
                <h3 class="form-section-title">
                    <span class="step-number">ðŸ“Š</span>
                    Usage Limits
                </h3>
            </div>
            
            <div class="form-grid">
                <div class="form-group">
                    <label class="form-label">Max Businesses</label>
                    <div class="form-input" style="background-color: var(--light-gray); color: var(--dark-gray);">
                        @(Model.MaxBusinesses == -1 ? "Unlimited" : Model.MaxBusinesses.ToString())
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Max Images per Business</label>
                    <div class="form-input" style="background-color: var(--light-gray); color: var(--dark-gray);">
                        @(Model.MaxImages == -1 ? "Unlimited" : Model.MaxImages.ToString())
                    </div>
                </div>
                
                <div class="form-group">
                    <label class="form-label">Max PDFs per Business</label>
                    <div class="form-input" style="background-color: var(--light-gray); color: var(--dark-gray);">
                        @(Model.MaxPDFs == -1 ? "Unlimited" : Model.MaxPDFs == 0 ? "None" : Model.MaxPDFs.ToString())
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Features -->
        <div class="form-section">
            <div class="form-section-header">
                <h3 class="form-section-title">
                    <span class="step-number">âœ¨</span>
                    Features & Support
                </h3>
            </div>
            
            <div class="checkbox-group">
                <div class="checkbox-item" style="@(Model.HasBasicSupport ? "" : "opacity: 0.5;")">
                    <input type="checkbox" class="service-checkbox" @(Model.HasBasicSupport ? "checked" : "") disabled />
                    <label class="checkbox-label">Basic Support</label>
                </div>
                
                <div class="checkbox-item" style="@(Model.HasPrioritySupport ? "" : "opacity: 0.5;")">
                    <input type="checkbox" class="service-checkbox" @(Model.HasPrioritySupport ? "checked" : "") disabled />
                    <label class="checkbox-label">Priority Support</label>
                </div>
                
                <div class="checkbox-item" style="@(Model.HasDedicatedSupport ? "" : "opacity: 0.5;")">
                    <input type="checkbox" class="service-checkbox" @(Model.HasDedicatedSupport ? "checked" : "") disabled />
                    <label class="checkbox-label">Dedicated Support</label>
                </div>
                
                <div class="checkbox-item" style="@(Model.HasBasicAnalytics ? "" : "opacity: 0.5;")">
                    <input type="checkbox" class="service-checkbox" @(Model.HasBasicAnalytics ? "checked" : "") disabled />
                    <label class="checkbox-label">Basic Analytics</label>
                </div>
                
                <div class="checkbox-item" style="@(Model.HasAdvancedAnalytics ? "" : "opacity: 0.5;")">
                    <input type="checkbox" class="service-checkbox" @(Model.HasAdvancedAnalytics ? "checked" : "") disabled />
                    <label class="checkbox-label">Advanced Analytics</label>
                </div>
                
                <div class="checkbox-item" style="@(Model.HasFeaturedPlacement ? "" : "opacity: 0.5;")">
                    <input type="checkbox" class="service-checkbox" @(Model.HasFeaturedPlacement ? "checked" : "") disabled />
                    <label class="checkbox-label">Featured Placement</label>
                </div>
                
                <div class="checkbox-item" style="@(Model.HasPDFUploads ? "" : "opacity: 0.5;")">
                    <input type="checkbox" class="service-checkbox" @(Model.HasPDFUploads ? "checked" : "") disabled />
                    <label class="checkbox-label">PDF Uploads</label>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Sidebar -->
    <div>
        <!-- Status Card -->
        <div class="admin-card">
            <div class="admin-card-header">
                <h3 class="admin-card-title">Status</h3>
            </div>
            
            <div style="padding: var(--space-md);">
                <div style="margin-bottom: var(--space-md);">
                    <span class="status-badge @(Model.IsActive ? "status-active" : "status-inactive")">
                        @(Model.IsActive ? "Active" : "Inactive")
                    </span>
                </div>
                
                <div style="font-size: var(--body-small); color: var(--dark-gray);">
                    @if (Model.IsActive)
                    {
                        <p>This tier is active and available for new subscriptions.</p>
                    }
                    else
                    {
                        <p>This tier is inactive and not available for new subscriptions.</p>
                    }
                </div>
            </div>
        </div>
        
        <!-- Subscription Stats -->
        <div class="admin-card">
            <div class="admin-card-header">
                <h3 class="admin-card-title">Subscription Stats</h3>
            </div>
            
            <div style="padding: var(--space-md);">
                <div class="stat-item" style="margin-bottom: var(--space-md);">
                    <div style="font-size: var(--h4-size); font-weight: var(--font-bold); color: var(--lapis-lazuli);">
                        @Model.ActiveSubscriptionsCount
                    </div>
                    <div style="font-size: var(--body-small); color: var(--dark-gray);">
                        Active Subscriptions
                    </div>
                </div>
                
                <div class="stat-item">
                    <div style="font-size: var(--h4-size); font-weight: var(--font-bold); color: var(--lapis-lazuli);">
                        R@((Model.ActiveSubscriptionsCount * Model.MonthlyPrice).ToString("N0"))
                    </div>
                    <div style="font-size: var(--body-small); color: var(--dark-gray);">
                        Monthly Revenue
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Metadata -->
        <div class="admin-card">
            <div class="admin-card-header">
                <h3 class="admin-card-title">Metadata</h3>
            </div>
            
            <div style="padding: var(--space-md); font-size: var(--body-small);">
                <div style="margin-bottom: var(--space-sm);">
                    <strong>Created:</strong><br>
                    @(Model.CreatedAt.ToString("MMM dd, yyyy 'at' HH:mm"))
                </div>
                
                @if (Model.UpdatedAt.HasValue)
                {
                    <div style="margin-bottom: var(--space-sm);">
                        <strong>Last Updated:</strong><br>
                        @(Model.UpdatedAt.Value.ToString("MMM dd, yyyy 'at' HH:mm"))
                    </div>
                }
                
                @if (!string.IsNullOrEmpty(Model.UpdatedByName))
                {
                    <div>
                        <strong>Updated By:</strong><br>
                        @Model.UpdatedByName
                    </div>
                }
            </div>
        </div>
        
        <!-- Actions -->
        <div class="admin-card">
            <div class="admin-card-header">
                <h3 class="admin-card-title">Actions</h3>
            </div>
            
            <div style="padding: var(--space-md); display: flex; flex-direction: column; gap: var(--space-sm);">
                <a href="@Url.Action("Edit", new { id = Model.Id })" class="auth-btn auth-btn-primary" style="width: 100%; justify-content: center;">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    Edit Tier
                </a>
                
                <a href="@Url.Action("ChangePrice", new { id = Model.Id })" class="auth-btn auth-btn-secondary" style="width: 100%; justify-content: center;">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                    </svg>
                    Change Price
                </a>
                
                @if (Model.IsActive && Model.ActiveSubscriptionsCount == 0)
                {
                    <form method="post" action="@Url.Action("Deactivate", new { id = Model.Id })" style="width: 100%;">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="auth-btn" style="width: 100%; justify-content: center; background-color: var(--orange-pantone); color: var(--white);" 
                                onclick="return confirm('Are you sure you want to deactivate this tier? It will no longer be available for new subscriptions.')">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"></path>
                            </svg>
                            Deactivate Tier
                        </button>
                    </form>
                }
                else if (Model.ActiveSubscriptionsCount > 0)
                {
                    <div class="auth-btn" style="width: 100%; justify-content: center; opacity: 0.5; cursor: not-allowed; background-color: var(--medium-gray);">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"></path>
                        </svg>
                        Cannot Deactivate
                    </div>
                    <div style="font-size: var(--body-xs); color: var(--dark-gray); text-align: center;">
                        Has active subscriptions
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/features/admin/subscription.css" asp-append-version="true" />
}
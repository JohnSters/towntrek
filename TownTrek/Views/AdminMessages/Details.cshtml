@model TownTrek.Models.ViewModels.AdminMessageDetailsViewModel
@{
    ViewData["Title"] = "Message Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/components/admin-messages.css" asp-append-version="true" />
}

<!-- Page Header -->
<div class="page-header">
    <div class="page-header-content">
        <div>
            <h1 class="page-title">Message Details</h1>
            <p class="page-description">View and respond to client message</p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("Index")" class="auth-btn auth-btn-secondary">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to Messages
            </a>
        </div>
    </div>
</div>

<div class="grid grid-2" style="gap: 2rem;">
    <!-- Message Details -->
    <div class="admin-card">
        <div class="admin-card-header">
            <div class="message-header-info">
                <h3 class="admin-card-title">@Model.Message.Subject</h3>
                <div class="message-meta">
                    <span class="badge badge-@GetPriorityClass(Model.Message.Priority)">@Model.Message.Priority Priority</span>
                    <span class="badge badge-@GetStatusClass(Model.Message.Status)">@Model.Message.Status</span>
                </div>
            </div>
        </div>
        
        <!-- Message Info -->
        <div class="message-info-grid">
            <div class="info-item">
                <label>From:</label>
                <span>@Model.Message.User.Email</span>
            </div>
            <div class="info-item">
                <label>Topic:</label>
                <span>
                    <i class="@Model.Message.Topic.IconClass"></i>
                    @Model.Message.Topic.Name
                </span>
            </div>
            <div class="info-item">
                <label>Created:</label>
                <span>@Model.Message.CreatedAt.ToString("MMMM dd, yyyy 'at' HH:mm")</span>
            </div>
            @if (Model.Message.ResolvedAt.HasValue)
            {
                <div class="info-item">
                    <label>Resolved:</label>
                    <span>@Model.Message.ResolvedAt.Value.ToString("MMMM dd, yyyy 'at' HH:mm")</span>
                </div>
            }
        </div>
        
        <!-- Message Content -->
        <div class="message-content">
            <h4>Message:</h4>
            <div class="message-text">
                @Html.Raw(Html.Encode(Model.Message.Message).Replace("\n", "<br />"))
            </div>
        </div>
        
        <!-- Admin Response -->
        @if (!string.IsNullOrEmpty(Model.Message.AdminResponse))
        {
            <div class="admin-response">
                <h4>Admin Response:</h4>
                <div class="response-content">
                    @Html.Raw(Html.Encode(Model.Message.AdminResponse).Replace("\n", "<br />"))
                </div>
                <div class="response-meta">
                    <small>
                        Responded on @Model.Message.ResponseAt?.ToString("MMMM dd, yyyy 'at' HH:mm")
                        @if (Model.Message.ResponseByUser != null)
                        {
                            <span> by @Model.Message.ResponseByUser.Email</span>
                        }
                    </small>
                </div>
            </div>
        }
        
        <!-- Quick Actions -->
        <div class="message-actions">
            @if (Model.Message.Status != "Resolved" && Model.Message.Status != "Closed")
            {
                <form method="post" asp-action="UpdateStatus" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="messageId" value="@Model.Message.Id" />
                    <input type="hidden" name="status" value="Resolved" />
                    <button type="submit" class="auth-btn auth-btn-success" onclick="return confirm('Mark this message as resolved?')">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        Mark as Resolved
                    </button>
                </form>
            }
            
            @if (Model.Message.Status == "Open")
            {
                <form method="post" asp-action="UpdateStatus" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="messageId" value="@Model.Message.Id" />
                    <input type="hidden" name="status" value="InProgress" />
                    <button type="submit" class="auth-btn auth-btn-warning">
                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                        Mark In Progress
                    </button>
                </form>
            }
            
            <form method="post" asp-action="Delete" style="display: inline;">
                @Html.AntiForgeryToken()
                <input type="hidden" name="messageId" value="@Model.Message.Id" />
                <button type="submit" class="auth-btn auth-btn-danger" onclick="return confirm('Are you sure you want to delete this message? This action cannot be undone.')">
                    <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                    </svg>
                    Delete Message
                </button>
            </form>
        </div>
    </div>
    
    <!-- Response Form & Related Messages -->
    <div>
        <!-- Response Form -->
        @if (Model.Message.Status != "Closed")
        {
            <div class="admin-card" style="margin-bottom: 2rem;">
                <div class="admin-card-header">
                    <h3 class="admin-card-title">
                        @(string.IsNullOrEmpty(Model.Message.AdminResponse) ? "Send Response" : "Update Response")
                    </h3>
                </div>
                
                <form method="post" asp-action="Respond">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="messageId" value="@Model.Message.Id" />
                    
                    <div class="form-group">
                        <label class="form-label">Response <span class="required">*</span></label>
                        <textarea name="responseText" class="form-textarea" rows="6" 
                                  placeholder="Type your response to the client here..." 
                                  maxlength="2000" required>@Model.ResponseText</textarea>
                        <div class="form-help">Maximum 2000 characters</div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="submit" class="auth-btn auth-btn-cta">
                            <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                            </svg>
                            Send Response
                        </button>
                    </div>
                </form>
            </div>
        }
        
        <!-- Related Messages -->
        @if (Model.RelatedMessages.Any())
        {
            <div class="admin-card">
                <div class="admin-card-header">
                    <h3 class="admin-card-title">Other Messages from This User</h3>
                </div>
                
                <div class="related-messages">
                    @foreach (var relatedMessage in Model.RelatedMessages)
                    {
                        <div class="related-message-item">
                            <div class="related-message-header">
                                <div class="related-message-topic">
                                    <i class="@relatedMessage.Topic.IconClass"></i>
                                    @relatedMessage.Topic.Name
                                </div>
                                <div class="related-message-status">
                                    <span class="badge badge-@GetStatusClass(relatedMessage.Status)">@relatedMessage.Status</span>
                                </div>
                            </div>
                            <div class="related-message-subject">
                                <a href="@Url.Action("Details", new { id = relatedMessage.Id })">
                                    @relatedMessage.Subject
                                </a>
                            </div>
                            <div class="related-message-date">
                                @relatedMessage.CreatedAt.ToString("MMM dd, yyyy")
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@functions {
    private string GetPriorityClass(string priority)
    {
        return priority.ToLower() switch
        {
            "critical" => "danger",
            "high" => "danger",
            "medium" => "warning",
            "low" => "secondary",
            _ => "secondary"
        };
    }
    
    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "open" => "info",
            "inprogress" => "warning",
            "resolved" => "success",
            "closed" => "secondary",
            _ => "secondary"
        };
    }
}
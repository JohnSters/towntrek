@model TownTrek.Models.ViewModels.ImageGalleryViewModel

@{
    ViewData["Title"] = "Image Gallery";
    Layout = "~/Views/Shared/_ClientLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/image-gallery.css" asp-append-version="true" />
    <style>
        .image-upload-area {
            border: 2px dashed #ddd;
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            background: #fafafa;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .image-upload-area:hover {
            border-color: #007bff;
            background: #f0f8ff;
        }
        
        .image-upload-area.dragover {
            border-color: #007bff;
            background: #e3f2fd;
        }
        
        .image-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-top: 2rem;
        }
        
        .image-card {
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            background: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }
        
        .image-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        
        .image-card img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }
        
        .image-card-body {
            padding: 0.75rem;
        }
        
        .image-card-title {
            font-size: 0.875rem;
            font-weight: 500;
            margin-bottom: 0.25rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .image-card-meta {
            font-size: 0.75rem;
            color: #666;
            margin-bottom: 0.5rem;
        }
        
        .image-card-actions {
            display: flex;
            gap: 0.25rem;
        }
        
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
        
        .upload-progress {
            display: none;
            margin-top: 1rem;
        }
        
        .progress {
            height: 20px;
            background-color: #f8f9fa;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .progress-bar {
            height: 100%;
            background-color: #007bff;
            transition: width 0.3s ease;
        }
    </style>
}

<!-- Page Header -->
<div class="page-header">
    <div class="page-header-content">
        <div>
            <h1 class="page-title">Image Gallery</h1>
            <p class="page-description">Manage images for your business listing</p>
        </div>
        <div class="page-actions">
            <a href="@Url.Action("ManageBusinesses", "Business")" class="auth-btn auth-btn-secondary">
                <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back to Businesses
            </a>
        </div>
    </div>
</div>

<!-- Upload Section -->
<div class="admin-card">
    <div class="admin-card-header">
        <h3 class="admin-card-title">Upload Images</h3>
        <p class="admin-card-description">
            Upload business logo and gallery images. Maximum file size: @((Model.MaxFileSizeBytes / (1024 * 1024)).ToString("F1"))MB
        </p>
    </div>
    
    <div class="admin-card-body">
        <!-- Logo Upload -->
        <div class="form-section">
            <h4>Business Logo</h4>
            @if (Model.Logo != null)
            {
                <div class="current-logo mb-3">
                    <img src="@Model.Logo.ImageUrl" alt="Current Logo" style="max-width: 200px; max-height: 100px; object-fit: contain;" />
                    <div class="mt-2">
                        <button type="button" class="btn btn-sm btn-danger" onclick="deleteImage(@Model.Logo.Id)">
                            Replace Logo
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="image-upload-area" id="logoUploadArea">
                    <input type="file" id="logoUpload" accept="@string.Join(",", Model.AllowedFileTypes)" style="display: none;" />
                    <div class="upload-content">
                        <svg width="48" height="48" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin: 0 auto 1rem; color: #666;">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        <p><strong>Click to upload</strong> or drag and drop your logo</p>
                        <p class="text-muted">PNG, JPG, GIF up to @((Model.MaxFileSizeBytes / (1024 * 1024)).ToString("F1"))MB</p>
                    </div>
                </div>
            }
        </div>

        <!-- Gallery Upload -->
        <div class="form-section">
            <h4>Gallery Images</h4>
            <div class="image-upload-area" id="galleryUploadArea">
                <input type="file" id="galleryUpload" accept="@string.Join(",", Model.AllowedFileTypes)" multiple style="display: none;" />
                <div class="upload-content">
                    <svg width="48" height="48" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="margin: 0 auto 1rem; color: #666;">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    <p><strong>Click to upload</strong> or drag and drop gallery images</p>
                    <p class="text-muted">Select multiple images. PNG, JPG, GIF up to @((Model.MaxFileSizeBytes / (1024 * 1024)).ToString("F1"))MB each</p>
                </div>
            </div>
            
            <div class="upload-progress">
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                </div>
                <p class="mt-2 text-center">Uploading images...</p>
            </div>
        </div>
    </div>
</div>

<!-- Current Images -->
<div class="admin-card">
    <div class="admin-card-header">
        <h3 class="admin-card-title">Current Images</h3>
        <p class="admin-card-description">@Model.AllImages.Count images uploaded</p>
    </div>
    
    <div class="admin-card-body">
        @if (Model.AllImages.Any())
        {
            <div class="image-grid" id="imageGrid">
                @foreach (var image in Model.AllImages.OrderBy(i => i.DisplayOrder).ThenBy(i => i.UploadedAt))
                {
                    <div class="image-card" data-image-id="@image.Id">
                        <img src="@(image.ThumbnailUrl ?? image.ImageUrl)" alt="@image.AltText" />
                        <div class="image-card-body">
                            <div class="image-card-title">@image.OriginalFileName</div>
                            <div class="image-card-meta">
                                @image.ImageType â€¢ @((image.FileSize / 1024).ToString("N0")) KB
                            </div>
                            <div class="image-card-actions">
                                <button type="button" class="btn btn-sm btn-primary" onclick="editImage(@image.Id)">
                                    Edit
                                </button>
                                <button type="button" class="btn btn-sm btn-danger" onclick="deleteImage(@image.Id)">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <svg width="64" height="64" fill="none" stroke="currentColor" viewBox="0 0 24 24" class="empty-state-icon">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <h3 class="empty-state-title">No Images Uploaded</h3>
                <p class="empty-state-description">Upload your business logo and gallery images to showcase your business.</p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        const businessId = @Model.BusinessId;
        const maxFileSize = @Model.MaxFileSizeBytes;
        const allowedTypes = @Html.Raw(Json.Serialize(Model.AllowedFileTypes));

        // Logo upload handling
        document.getElementById('logoUploadArea').addEventListener('click', () => {
            document.getElementById('logoUpload').click();
        });

        document.getElementById('logoUpload').addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                uploadImage(e.target.files[0], 'Logo');
            }
        });

        // Gallery upload handling
        document.getElementById('galleryUploadArea').addEventListener('click', () => {
            document.getElementById('galleryUpload').click();
        });

        document.getElementById('galleryUpload').addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                uploadMultipleImages(Array.from(e.target.files), 'Gallery');
            }
        });

        // Drag and drop handling
        ['logoUploadArea', 'galleryUploadArea'].forEach(areaId => {
            const area = document.getElementById(areaId);
            
            area.addEventListener('dragover', (e) => {
                e.preventDefault();
                area.classList.add('dragover');
            });

            area.addEventListener('dragleave', () => {
                area.classList.remove('dragover');
            });

            area.addEventListener('drop', (e) => {
                e.preventDefault();
                area.classList.remove('dragover');
                
                const files = Array.from(e.dataTransfer.files);
                const imageType = areaId === 'logoUploadArea' ? 'Logo' : 'Gallery';
                
                if (imageType === 'Logo' && files.length > 0) {
                    uploadImage(files[0], 'Logo');
                } else if (imageType === 'Gallery') {
                    uploadMultipleImages(files, 'Gallery');
                }
            });
        });

        // Upload single image
        async function uploadImage(file, imageType) {
            if (!validateFile(file)) return;

            const formData = new FormData();
            formData.append('BusinessId', businessId);
            formData.append('ImageType', imageType);
            formData.append('ImageFile', file);

            try {
                showProgress(true);
                const response = await fetch('/Image/Upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    showMessage('Image uploaded successfully!', 'success');
                    location.reload(); // Refresh to show new image
                } else {
                    showMessage(result.message || 'Upload failed', 'error');
                }
            } catch (error) {
                showMessage('Upload failed: ' + error.message, 'error');
            } finally {
                showProgress(false);
            }
        }

        // Upload multiple images
        async function uploadMultipleImages(files, imageType) {
            const validFiles = files.filter(validateFile);
            if (validFiles.length === 0) return;

            const formData = new FormData();
            formData.append('businessId', businessId);
            formData.append('imageType', imageType);
            
            validFiles.forEach(file => {
                formData.append('files', file);
            });

            try {
                showProgress(true);
                const response = await fetch('/Image/UploadMultiple', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    showMessage(result.message, 'success');
                    location.reload(); // Refresh to show new images
                } else {
                    showMessage(result.message || 'Upload failed', 'error');
                }
            } catch (error) {
                showMessage('Upload failed: ' + error.message, 'error');
            } finally {
                showProgress(false);
            }
        }

        // Delete image
        async function deleteImage(imageId) {
            if (!confirm('Are you sure you want to delete this image?')) return;

            try {
                const response = await fetch('/Image/Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ imageId: imageId })
                });

                const result = await response.json();
                
                if (result.success) {
                    showMessage('Image deleted successfully!', 'success');
                    document.querySelector(`[data-image-id="${imageId}"]`).remove();
                } else {
                    showMessage(result.message || 'Delete failed', 'error');
                }
            } catch (error) {
                showMessage('Delete failed: ' + error.message, 'error');
            }
        }

        // Edit image (placeholder)
        function editImage(imageId) {
            // This could open a modal for editing alt text, display order, etc.
            alert('Edit functionality coming soon!');
        }

        // Validate file
        function validateFile(file) {
            if (file.size > maxFileSize) {
                showMessage(`File size must be less than ${(maxFileSize / (1024 * 1024)).toFixed(1)}MB`, 'error');
                return false;
            }

            if (!allowedTypes.includes(file.type)) {
                showMessage(`File type '${file.type}' is not allowed`, 'error');
                return false;
            }

            return true;
        }

        // Show progress
        function showProgress(show) {
            const progressElement = document.querySelector('.upload-progress');
            progressElement.style.display = show ? 'block' : 'none';
        }

        // Show message
        function showMessage(message, type) {
            // Create a simple toast notification
            const toast = document.createElement('div');
            toast.className = `alert alert-${type === 'success' ? 'success' : 'danger'} alert-dismissible fade show`;
            toast.style.position = 'fixed';
            toast.style.top = '20px';
            toast.style.right = '20px';
            toast.style.zIndex = '9999';
            toast.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.remove();
            }, 5000);
        }
    </script>
}
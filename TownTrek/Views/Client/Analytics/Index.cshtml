@model TownTrek.Models.ViewModels.ClientAnalyticsViewModel
@{
    ViewData["Title"] = "Analytics Dashboard";
    Layout = "_ClientLayout";
}

<div class="analytics-dashboard">
    @await Html.PartialAsync("_AnalyticsHeader", Model)
    
    @if (ViewBag.NoBusinesses != true)
    {
        @await Html.PartialAsync("_AnalyticsMetrics", Model)
        @await Html.PartialAsync("_AnalyticsCharts", Model)
        @await Html.PartialAsync("_AnalyticsBusinessPerformance", Model)
        @await Html.PartialAsync("_AnalyticsPerformanceInsights", Model)
        @await Html.PartialAsync("_AnalyticsAdvancedFeatures", Model)
    }
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/components/modal.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/features/client/analytics-core.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/features/client/analytics-charts.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/features/client/analytics-realtime.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/features/client/analytics-export.css" asp-append-version="true" />
}

@section Scripts {
    <script src="~/lib/chart.js/chart.bundle.min.js"></script>
    <script src="~/lib/signalr/signalr.min.js"></script>
    
    <script>
        // Simple, direct chart initialization - no complex modules
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Starting simple chart initialization...');
            
            // Initialize views chart
            initializeViewsChart();
            
            // Initialize reviews chart
            initializeReviewsChart();
        });
        
        async function initializeViewsChart() {
            try {
                console.log('üìä Initializing views chart...');
                const canvas = document.getElementById('viewsChart');
                if (!canvas) {
                    console.error('Views chart canvas not found');
                    return;
                }
                
                // Fetch data
                const response = await fetch('/Client/ChartData/ViewsOverTimeData?days=30');
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.message || 'Failed to fetch views data');
                }
                
                console.log('Views data:', result.data);
                
                // Transform data
                const data = {
                    labels: result.data.map(item => {
                        const date = new Date(item.date);
                        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                    }),
                    datasets: [{
                        label: 'Views',
                        data: result.data.map(item => item.views),
                        borderColor: '#33658a',
                        backgroundColor: '#33658a20',
                        fill: true,
                        tension: 0.4
                    }]
                };
                
                // Create chart
                new Chart(canvas, {
                    type: 'line',
                    data: data,
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return value.toLocaleString();
                                    }
                                }
                            }
                        }
                    }
                });
                
                console.log('‚úÖ Views chart created successfully');
            } catch (error) {
                console.error('‚ùå Error initializing views chart:', error);
            }
        }
        
        async function initializeReviewsChart() {
            try {
                console.log('‚≠ê Initializing reviews chart...');
                const canvas = document.getElementById('reviewsChart');
                if (!canvas) {
                    console.error('Reviews chart canvas not found');
                    return;
                }
                
                // Fetch data
                const response = await fetch('/Client/ChartData/ReviewsOverTimeData?days=30');
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.message || 'Failed to fetch reviews data');
                }
                
                console.log('Reviews data:', result.data);
                
                // Transform data
                const data = {
                    labels: result.data.map(item => {
                        const date = new Date(item.date);
                        return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                    }),
                    datasets: [{
                        label: 'Average Rating',
                        data: result.data.map(item => item.averageRating || 0),
                        backgroundColor: '#86bbd8',
                        borderColor: '#33658a',
                        borderWidth: 1,
                        borderRadius: 4
                    }]
                };
                
                // Create chart
                new Chart(canvas, {
                    type: 'bar',
                    data: data,
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 5,
                                ticks: {
                                    stepSize: 1,
                                    callback: function(value) {
                                        return value.toFixed(1);
                                    }
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const rating = context.raw;
                                        const dataIndex = context.dataIndex;
                                        const reviewCount = result.data[dataIndex]?.reviews || 0;
                                        
                                        let label = `Rating: ${rating.toFixed(1)} ‚≠ê`;
                                        if (reviewCount > 0) {
                                            label += ` (${reviewCount} review${reviewCount > 1 ? 's' : ''})`;
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
                
                console.log('‚úÖ Reviews chart created successfully');
            } catch (error) {
                console.error('‚ùå Error initializing reviews chart:', error);
            }
        }
    </script>
}
@model TownTrek.Models.ViewModels.BusinessSearchViewModel
@{
    ViewData["Title"] = "Search Businesses";
    Layout = "_Layout";
}

<div class="business-search-page">
    <!-- Search Header -->
    <section class="search-header-section">
        <div class="container">
            <h1>Discover Local Businesses</h1>
            <p class="search-subtitle">Find exactly what you're looking for across South Africa's vibrant towns</p>
        </div>
    </section>

    <!-- Search Form -->
    <section class="search-form-section">
        <div class="container">
            <form asp-action="Search" method="get" class="advanced-search-form" data-public-form="search">
                <div class="search-form-grid">
                    <!-- Search Term -->
                    <div class="search-field">
                        <label for="searchTerm">Search</label>
                        <input type="text" name="search" id="searchTerm" class="form-input" 
                               placeholder="Business name, service, or keyword..." 
                               value="@Model.SearchTerm" />
                    </div>

                    <!-- Town Filter -->
                    <div class="search-field">
                        <label for="townFilter">Town</label>
                        <select name="townId" id="townFilter" class="form-select">
                            <option value="">All Towns</option>
                            @foreach (var town in Model.AvailableTowns)
                            {
                                <option value="@town.Id" selected="@(Model.TownId == town.Id)">
                                    @town.Name, @town.Province
                                </option>
                            }
                        </select>
                    </div>

                    <!-- Category Filter -->
                    <div class="search-field">
                        <label for="categoryFilter">Category</label>
                        <select name="category" id="categoryFilter" class="form-select" data-public-filter="category">
                            <option value="">All Categories</option>
                            @foreach (var category in Model.AvailableCategories)
                            {
                                <option value="@category.Key" selected="@(Model.Category == category.Key)">
                                    @category.Name
                                </option>
                            }
                        </select>
                    </div>

                    <!-- Sub-Category Filter -->
                    <div id="subCategoryField" class="search-field @(string.IsNullOrEmpty(Model.Category) ? "d-none" : "")">
                        <label for="subCategoryFilter">Sub-Category</label>
                        <select name="subCategory" id="subCategoryFilter" class="form-select" data-public-filter="subcategory">
                            <option value="">All Sub-Categories</option>
                        </select>
                    </div>

                    <!-- Search Button -->
                    <div class="search-field search-action">
                        <button type="submit" class="btn btn-cta search-submit-btn">
                            <svg width="18" height="18" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <circle cx="11" cy="11" r="8"/>
                                <path d="m21 21-4.35-4.35"/>
                            </svg>
                            Search
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </section>

    <!-- Search Results -->
    <section class="search-results-section">
        <div class="container">
            <!-- Results Header -->
            <div class="results-header">
                <div class="results-info">
                    <h2>
                        @if (!string.IsNullOrEmpty(Model.SearchTerm))
                        {
                            <span>Search results for "@Model.SearchTerm"</span>
                        }
                        else
                        {
                            <span>Browse all businesses</span>
                        }
                    </h2>
                    <p class="results-count">@Model.TotalResults results found</p>
                </div>

                @if (Model.HasResults || !string.IsNullOrEmpty(Model.SearchTerm) || Model.TownId.HasValue || !string.IsNullOrEmpty(Model.Category))
                {
                    <div class="results-actions">
                        <button type="button" id="clearAllFilters" class="btn btn-secondary" data-public-action="clear-filters">Clear All Filters</button>
                    </div>
                }
            </div>

            <!-- Active Filters -->
            <div class="active-filters @(string.IsNullOrEmpty(Model.SearchTerm) && !Model.TownId.HasValue && string.IsNullOrEmpty(Model.Category) ? "d-none" : "")" id="activeFilters">
                <span class="filters-label">Active filters:</span>
                <div class="filter-tags">
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        <div class="filter-tag">
                            <span>Search: "@Model.SearchTerm"</span>
                            <button type="button" class="remove-filter" data-public-action="remove-filter" data-filter="search">√ó</button>
                        </div>
                    }
                    @if (Model.TownId.HasValue)
                    {
                        <div class="filter-tag">
                            <span>Town: @Model.AvailableTowns.FirstOrDefault(t => t.Id == Model.TownId)?.Name</span>
                            <button type="button" class="remove-filter" data-public-action="remove-filter" data-filter="town">√ó</button>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.Category))
                    {
                        <div class="filter-tag">
                            <span>Category: @Model.AvailableCategories.FirstOrDefault(c => c.Key == Model.Category)?.Name</span>
                            <button type="button" class="remove-filter" data-public-action="remove-filter" data-filter="category">√ó</button>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model.SubCategory))
                    {
                        <div class="filter-tag">
                            <span>Sub-Category: @Model.SubCategory</span>
                            <button type="button" class="remove-filter" data-public-action="remove-filter" data-filter="subcategory">√ó</button>
                        </div>
                    }
                </div>
            </div>

            <!-- Results Grid -->
            <div id="searchResults" class="search-results">
                @if (Model.HasResults)
                {
                    <div class="business-grid">
                        @foreach (var business in Model.Results)
                        {
                            @await Html.PartialAsync("_BusinessCard", business)
                        }
                    </div>

                    <!-- Pagination -->
                    @if (Model.TotalPages > 1)
                    {
                        <div class="pagination-wrapper">
                            <nav class="pagination">
                                @if (Model.CurrentPage > 1)
                                {
                                    <a href="#" class="pagination-btn" data-page="@(Model.CurrentPage - 1)" data-public-action="load-page">
                                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <polyline points="15,18 9,12 15,6"/>
                                        </svg>
                                        Previous
                                    </a>
                                }

                                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                {
                                    <a href="#" class="pagination-btn @(i == Model.CurrentPage ? "active" : "")" data-page="@i" data-public-action="load-page">
                                        @i
                                    </a>
                                }

                                @if (Model.CurrentPage < Model.TotalPages)
                                {
                                    <a href="#" class="pagination-btn" data-page="@(Model.CurrentPage + 1)" data-public-action="load-page">
                                        Next
                                        <svg width="16" height="16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <polyline points="9,18 15,12 9,6"/>
                                        </svg>
                                    </a>
                                }
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="no-results">
                        <div class="no-results-icon">üîç</div>
                        <h3>No businesses found</h3>
                        @if (!string.IsNullOrEmpty(Model.SearchTerm) || Model.TownId.HasValue || !string.IsNullOrEmpty(Model.Category))
                        {
                            <p>Try adjusting your search criteria or explore other categories.</p>
                            <div class="no-results-actions">
                                <button type="button" id="clearFiltersNoResults" class="btn btn-primary" data-public-action="clear-filters">Clear All Filters</button>
                                <a href="@Url.Action("Index", "Public")" class="btn btn-secondary">Back to Dashboard</a>
                            </div>
                        }
                        else
                        {
                            <p>Start by entering a search term or selecting filters above.</p>
                            <div class="no-results-actions">
                                <a href="@Url.Action("Index", "Public")" class="btn btn-primary">Back to Dashboard</a>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </section>

    <!-- Quick Categories -->
    @if (!Model.HasResults && string.IsNullOrEmpty(Model.SearchTerm) && !Model.TownId.HasValue && string.IsNullOrEmpty(Model.Category))
    {
        <section class="quick-categories-section">
            <div class="container">
                <h2>Popular Categories</h2>
                <p>Explore businesses by category</p>
                
                <div class="category-grid">
                    @foreach (var category in Model.AvailableCategories.Take(6))
                    {
                        <a href="@Url.Action("Search", "Public", new { category = category.Key })" class="category-card">
                            <div class="category-icon">
                                @if (!string.IsNullOrEmpty(category.IconClass))
                                {
                                    <i class="@category.IconClass"></i>
                                }
                                else
                                {
                                    <span>@category.Name.Substring(0, 1)</span>
                                }
                            </div>
                            <h3>@category.Name</h3>
                            @if (!string.IsNullOrEmpty(category.Description))
                            {
                                <p>@category.Description</p>
                            }
                        </a>
                    }
                </div>
            </div>
        </section>
    }
</div>

<!-- Hidden data for JavaScript -->
<div id="searchPageData" class="d-none"
     data-selected-subcategory='@Model.SubCategory'
     data-categories='@Json.Serialize(Model.AvailableCategories.Select(c => new { key = c.Key, name = c.Name, subCategories = c.SubCategories.Select(sc => new { key = sc.Key, name = sc.Name }) }))'>
</div>

@section Scripts {
    <script src="~/js/modules/public/public-manager.js" asp-append-version="true"></script>
    <script>
        document.body.dataset.page = 'public-search';
    </script>
}